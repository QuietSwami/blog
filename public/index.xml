<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Francisco Mendonca&#39;s Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Francisco Mendonca&#39;s Blog</description>
    <generator>Hugo -- 0.125.3</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 May 2024 16:35:06 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Generators and Iterators</title>
      <link>http://localhost:1313/posts/generators-and-iterators/</link>
      <pubDate>Mon, 20 May 2024 16:35:06 +0200</pubDate>
      <guid>http://localhost:1313/posts/generators-and-iterators/</guid>
      <description>Python stands out as an exceptionally user-friendly programming language, offering straightforward fundamental concepts ideal for newcomers to coding. However, it also boasts several advanced features that enhance performance significantly. Among these features, Generators and Iterators are particularly noteworthy within the Python ecosystem. These tools are crucial for optimizing memory usage and implementing lazy evaluation, allowing programmers to handle large data sets more efficiently without the need for extensive memory allocation. Generators and Iterators enable the creation of efficient code that is not only resource-friendly but also cleaner and more readable, demonstrating Pythonâ€™s versatility from basic scripting to handling complex, large-scale applications.</description>
    </item>
    <item>
      <title>Decorators in Python</title>
      <link>http://localhost:1313/posts/pythondecorators/</link>
      <pubDate>Mon, 06 May 2024 21:21:51 +0200</pubDate>
      <guid>http://localhost:1313/posts/pythondecorators/</guid>
      <description>Python is renowned for its exceptional versatility, making it ideal for diverse applications, from web development to data science. In this blog post, we&amp;rsquo;re diving into a powerful feature known as Decorators. Although I had not explored Decorators for quite some time, I decided it was finally time to thoroughly understand and master them.
Understanding Nested Functions in Python Before diving into decorators, it&amp;rsquo;s helpful to understand nested functions in Python.</description>
    </item>
    <item>
      <title>Introduction</title>
      <link>http://localhost:1313/posts/introduction/</link>
      <pubDate>Wed, 24 Apr 2024 11:54:29 +0200</pubDate>
      <guid>http://localhost:1313/posts/introduction/</guid>
      <description>After one year in my PhD, I accumulated a lot of notes, both hand-written or written using tools like Obsidian, Notion, or similar. I&amp;rsquo;ve loss track of most notes I took, and do not actively keep track of most. I thought a blog was exactly what I needed, somewhere to discuss more in depth some of the work I&amp;rsquo;m developing, and other projects I come across.
I hope this blog comes to serve some use to at least me - a place where I can develop further certain ideas, skills, and other tid bits I might find interesting.</description>
    </item>
  </channel>
</rss>
