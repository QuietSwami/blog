<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Francisco Mendonca&#39;s Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Francisco Mendonca&#39;s Blog</description>
    <generator>Hugo -- 0.125.3</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Sep 2024 13:13:49 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Federation</title>
      <link>http://localhost:1313/posts/federation/</link>
      <pubDate>Mon, 02 Sep 2024 13:13:49 +0200</pubDate>
      <guid>http://localhost:1313/posts/federation/</guid>
      <description>Warning
This post is a draft and may not be accurate or complete. For the past few weeks I&amp;rsquo;ve been interested in exploring how data cooperatives can be extended by forming a Federation. And how these federations can be organized. Later, I&amp;rsquo;ll present in more detail what type of architecture I propose to implement this, but for now, let&amp;rsquo;s have a look on the idea of Federation of Data Cooperatives</description>
    </item>
    <item>
      <title>Data Cooperatives</title>
      <link>http://localhost:1313/posts/data_cooperatives/</link>
      <pubDate>Mon, 02 Sep 2024 13:13:33 +0200</pubDate>
      <guid>http://localhost:1313/posts/data_cooperatives/</guid>
      <description>Warning
This post is a draft and may not be accurate or complete. This note will focus on the reason why data cooperatives are needed (with a focus on agriculture), some architecture suggestions for their application, and why I think Dataspaces, as developed by IDSA might be a good solution for it.</description>
    </item>
    <item>
      <title>Publishing Drafts</title>
      <link>http://localhost:1313/posts/publishingdrafts/</link>
      <pubDate>Mon, 02 Sep 2024 13:13:33 +0200</pubDate>
      <guid>http://localhost:1313/posts/publishingdrafts/</guid>
      <description>Normally, there is no reason to publish drafts. I mean, who wants to display to the world their unfinished, unpolished and unverfied work? Aparently me. The idea was borned after I read Learning in Public by Shawn Wang. The premise is simple: while the majority of us learn in private, learning by publicaly displaying what you know about a subject, and submitting yourself to the wider public critisism has the ability of actually improving how deep you learn.</description>
    </item>
    <item>
      <title>Mastering Docker Swarm Pt.1</title>
      <link>http://localhost:1313/posts/mastering_docker_swarm_pt._1/</link>
      <pubDate>Mon, 17 Jun 2024 11:56:50 +0200</pubDate>
      <guid>http://localhost:1313/posts/mastering_docker_swarm_pt._1/</guid>
      <description>Docker Swarm integrates clustering seamlessly with Docker, connecting Docker Daemons into a single, unified network. In a Docker Swarm cluster, one (or more) node is designated as the master (or manager), while the rest are worker nodes. The master node is responsible for distributing services across the worker nodes and ensuring that the desired state of each service is maintained.
For this demonstration, I have created a Docker Swarm cluster on AWS, consisting of 3 master nodes and 3 worker nodes.</description>
    </item>
    <item>
      <title>Generators and Iterators</title>
      <link>http://localhost:1313/posts/generators-and-iterators/</link>
      <pubDate>Mon, 20 May 2024 16:35:06 +0200</pubDate>
      <guid>http://localhost:1313/posts/generators-and-iterators/</guid>
      <description>Python stands out as an exceptionally user-friendly programming language, offering straightforward fundamental concepts ideal for newcomers to coding. However, it also boasts several advanced features that enhance performance significantly. Among these features, Generators and Iterators are particularly noteworthy within the Python ecosystem. These tools are crucial for optimizing memory usage and implementing lazy evaluation, allowing programmers to handle large data sets more efficiently without the need for extensive memory allocation. Generators and Iterators enable the creation of efficient code that is not only resource-friendly but also cleaner and more readable, demonstrating Pythonâ€™s versatility from basic scripting to handling complex, large-scale applications.</description>
    </item>
    <item>
      <title>Decorators in Python</title>
      <link>http://localhost:1313/posts/pythondecorators/</link>
      <pubDate>Mon, 06 May 2024 21:21:51 +0200</pubDate>
      <guid>http://localhost:1313/posts/pythondecorators/</guid>
      <description>Python is renowned for its exceptional versatility, making it ideal for diverse applications, from web development to data science. In this blog post, we&amp;rsquo;re diving into a powerful feature known as Decorators. Although I had not explored Decorators for quite some time, I decided it was finally time to thoroughly understand and master them.
Understanding Nested Functions in Python Before diving into decorators, it&amp;rsquo;s helpful to understand nested functions in Python.</description>
    </item>
    <item>
      <title>Introduction</title>
      <link>http://localhost:1313/posts/introduction/</link>
      <pubDate>Wed, 24 Apr 2024 11:54:29 +0200</pubDate>
      <guid>http://localhost:1313/posts/introduction/</guid>
      <description>After one year in my PhD, I accumulated a lot of notes, both hand-written or written using tools like Obsidian, Notion, or similar. I&amp;rsquo;ve loss track of most notes I took, and do not actively keep track of most. I thought a blog was exactly what I needed, somewhere to discuss more in depth some of the work I&amp;rsquo;m developing, and other projects I come across.
I hope this blog comes to serve some use to at least me - a place where I can develop further certain ideas, skills, and other tid bits I might find interesting.</description>
    </item>
  </channel>
</rss>
